// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "stocks.proto" (package "stocks", syntax proto3)
// tslint:disable
import { UserStock } from "./stocks";
import { StocksList } from "./stocks";
import { User } from "./stocks";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service stocks.StocksService
 */
export interface IStocksService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetStocks(stocks.User) returns (stocks.StocksList);
     */
    getStocks: grpc.handleUnaryCall<User, StocksList>;
    /**
     * @generated from protobuf rpc: AddStock(stocks.UserStock) returns (stocks.StocksList);
     */
    addStock: grpc.handleUnaryCall<UserStock, StocksList>;
    /**
     * @generated from protobuf rpc: DeleteStock(stocks.UserStock) returns (stocks.StocksList);
     */
    deleteStock: grpc.handleUnaryCall<UserStock, StocksList>;
}
/**
 * @grpc/grpc-js definition for the protobuf service stocks.StocksService.
 *
 * Usage: Implement the interface IStocksService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IStocksService = ...
 * server.addService(stocksServiceDefinition, service);
 * ```
 */
export const stocksServiceDefinition: grpc.ServiceDefinition<IStocksService> = {
    getStocks: {
        path: "/stocks.StocksService/GetStocks",
        originalName: "GetStocks",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StocksList.fromBinary(bytes),
        requestDeserialize: bytes => User.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StocksList.toBinary(value)),
        requestSerialize: value => Buffer.from(User.toBinary(value))
    },
    addStock: {
        path: "/stocks.StocksService/AddStock",
        originalName: "AddStock",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StocksList.fromBinary(bytes),
        requestDeserialize: bytes => UserStock.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StocksList.toBinary(value)),
        requestSerialize: value => Buffer.from(UserStock.toBinary(value))
    },
    deleteStock: {
        path: "/stocks.StocksService/DeleteStock",
        originalName: "DeleteStock",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StocksList.fromBinary(bytes),
        requestDeserialize: bytes => UserStock.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StocksList.toBinary(value)),
        requestSerialize: value => Buffer.from(UserStock.toBinary(value))
    }
};
