// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "stocks.proto" (package "stocks", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StocksService } from "./stocks";
import type { UserStock } from "./stocks";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StocksList } from "./stocks";
import type { User } from "./stocks";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service stocks.StocksService
 */
export interface IStocksServiceClient {
    /**
     * @generated from protobuf rpc: GetStocks(stocks.User) returns (stocks.StocksList);
     */
    getStocks(input: User, options?: RpcOptions): UnaryCall<User, StocksList>;
    /**
     * @generated from protobuf rpc: AddStock(stocks.UserStock) returns (stocks.StocksList);
     */
    addStock(input: UserStock, options?: RpcOptions): UnaryCall<UserStock, StocksList>;
    /**
     * @generated from protobuf rpc: DeleteStock(stocks.UserStock) returns (stocks.StocksList);
     */
    deleteStock(input: UserStock, options?: RpcOptions): UnaryCall<UserStock, StocksList>;
}
/**
 * @generated from protobuf service stocks.StocksService
 */
export class StocksServiceClient implements IStocksServiceClient, ServiceInfo {
    typeName = StocksService.typeName;
    methods = StocksService.methods;
    options = StocksService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetStocks(stocks.User) returns (stocks.StocksList);
     */
    getStocks(input: User, options?: RpcOptions): UnaryCall<User, StocksList> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, StocksList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddStock(stocks.UserStock) returns (stocks.StocksList);
     */
    addStock(input: UserStock, options?: RpcOptions): UnaryCall<UserStock, StocksList> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserStock, StocksList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteStock(stocks.UserStock) returns (stocks.StocksList);
     */
    deleteStock(input: UserStock, options?: RpcOptions): UnaryCall<UserStock, StocksList> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserStock, StocksList>("unary", this._transport, method, opt, input);
    }
}
